/*
PIC's internal EEPROM functions
*/

#include <p18f46k22.h>
#include "rosefloat.h"


void sine_wave(){

int i=0,d=0,k=2000,count=0;

while(count<2500)
{
	if(d==0)
			i++;
			else
			i--;
			commandOut(i-getCurrentPosition(0),0);
			count++;
			if(i>1000)
			d=1;
			if(i<0)
			d=0;
			while(1)
			{
			for(k=100;k>1;k--)
			{}
			break;
			}
}
}

void record_eep(){
int k=0,i,l;
		for(k=0;k<50;k++)
{
		l=getCurrentPosition(0);
		Write_eep(k*2,ADRESL);
		Write_eep(k*2+1,ADRESH);
		commandOut(l,0);
		for(i=5000;i>0;i--)
		{}


}
}

void playback_eep(){
int k=0,i;
		for(k=0;k<50;k++)
{
		commandOut((((int)Read_b_eep(k*2+1) << 8) + Read_b_eep(k*2))-getCurrentPosition(0),0);
		for(i=5000;i>0;i--)
		{}
}
}



void Write_eep( unsigned int badd,unsigned char bdata )
{
	EEADRH = (unsigned char)(badd >> 8);
	EEADR = (unsigned char)(badd & 0x0ff);
	EEDATA = bdata;



   EECON1bits.EEPGD = 0;
	EECON1bits.CFGS = 0;
	EECON1bits.WREN = 1;
	INTCONbits.GIE = 0;
	EECON2 = 0x55;
	EECON2 = 0xAA;
	EECON1bits.WR = 1;
	while(EECON1bits.WR);				//Wait till the write completion
	EECON1bits.WREN = 0;
	INTCONbits.GIE = 1;

}

unsigned char Read_b_eep( unsigned int badd )
{
	EEADRH = (badd >> 8) & 0x03;
	EEADR = (badd & 0x0ff);
   EECON1bits.CFGS = 0;
	EECON1bits.EEPGD = 0;
	EECON1bits.RD = 1;
	Nop();							//Nop may be required for latency at high frequencies
	Nop();							//Nop may be required for latency at high frequencies
	return ( EEDATA );              // return with read byte 
}